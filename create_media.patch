diff --git a/workbench_utils.py b/workbench_utils.py
index d667a8a..a9e64a1 100644
--- a/workbench_utils.py
+++ b/workbench_utils.py
@@ -3352,6 +3352,18 @@ def create_media(config, filename, file_fieldname, node_id, csv_row, media_use_t
                  it doesn't have sufficient information to create the media, or None
                  if config['nodes_only'] is True.
     """
+
+    def get_node_media_from_nid(config, node_id):
+        """Get node field_islandora_object_media from Drupal.
+        """
+        node_url = config['host'] + '/node/' + node_id + '?_format=json'
+        node_response = issue_request(config, 'GET', node_url)
+        if node_response.status_code == 200:
+            node_dict = json.loads(node_response.text)
+            return node_dict['field_islandora_object_media']
+        else:
+            return False
+
     if config['nodes_only'] is True:
         return
 
@@ -3446,10 +3458,6 @@ def create_media(config, filename, file_fieldname, node_id, csv_row, media_use_t
                 media_field: [{
                     "value": filename
                 }],
-                "field_media_of": [{
-                    "target_id": int(node_id),
-                    "target_type": 'node'
-                }],
                 "field_media_use": [{
                     "target_id": media_use_tids[0],
                     "target_type": 'taxonomy_term'
@@ -3469,10 +3477,6 @@ def create_media(config, filename, file_fieldname, node_id, csv_row, media_use_t
                     "target_id": file_result,
                     "target_type": 'file'
                 }],
-                "field_media_of": [{
-                    "target_id": int(node_id),
-                    "target_type": 'node'
-                }],
                 "field_media_use": [{
                     "target_id": media_use_tids[0],
                     "target_type": 'taxonomy_term'
@@ -3654,6 +3658,65 @@ def create_media(config, filename, file_fieldname, node_id, csv_row, media_use_t
                 else:
                     logging.error("Could not PATCH additional media use terms to media created from '%s' because media ID is not available.", filename)
 
+            # Update the node reference field
+            if media_response.status_code == 201:
+
+                media_response_body = json.loads(media_response.text)
+                if 'mid' in media_response_body:
+                    media_id = media_response_body['mid'][0]['value']
+                else: 
+                    logging.error("Could not PATCH node or additional media use terms to media created from '%s' because media ID is not available.", filename)
+                    raise Exception("Unable to get media_id")
+
+                if len(media_use_tids) > 1:
+                     patch_media_use_terms(config, media_id, media_type, media_use_tids)
+                     
+                node_media_json = {
+                        'type': [
+                            {'target_id': "islandora_object"}
+                        ],
+                        'field_islandora_object_media': [
+                            {
+                                'target_id': media_id,
+                                'target_type': "media"
+                            }
+                        ]
+                    }
+
+                # If append_media is True
+                if "append_media" in config and config["append_media"] == True:
+                    node_media_list = get_node_media_from_nid(config, str(node_id))
+
+                    pruned_node_media_list = []
+                    for media_item in node_media_list:
+                        target_id = None
+                        if "target_type" in media_item:
+                            target_id = media_item["target_id"]                        
+                        target_type = None
+                        if "target_type" in media_item:
+                            target_type = media_item["target_type"]
+                        if target_id == None or target_type == None:
+                            # This is the use case where the user deletes the media, but does not remove the reference from the node
+                            if "ignore_invalid_media_reference" in config and config['ignore_invalid_media_reference'] == True:
+                                logging.warning("Invalid media reference for " + node_id)
+                            else:
+                                logging.error("Invalid media reference for " + node_id)
+                                raise Exception("Invalid media reference for " + node_id)
+                        else:
+                            pruned_node_media_list.append(media_item)
+                    
+                    if len(pruned_node_media_list) > 0:
+                        current_media = {"target_id": media_id, "target_type": 'media'}
+                        pruned_node_media_list.append(current_media)
+                        node_media_json['field_islandora_object_media'] = pruned_node_media_list
+
+                node_endpoint = config['host'] + '/node/' + str(node_id) + '?_format=json'
+                node_headers = {'Content-Type': 'application/json'}
+                node_response = issue_request(config, 'PATCH', node_endpoint, node_headers, node_media_json)
+            
+                if node_response.status_code != 200:
+                    logging.error("PATCH to the node after media was created failed.")
+
             # Execute media-specific post-create scripts, if any are configured.
             if 'media_post_create' in config and len(config['media_post_create']) > 0:
                 for command in config['media_post_create']:
